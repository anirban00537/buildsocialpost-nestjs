generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  first_name    String?
  last_name     String?
  user_name     String?   @unique @db.VarChar(255)
  unique_code   String?   @unique @db.VarChar(255)
  phone         String?   @db.VarChar(180)
  photo         String?   @db.VarChar(500)
  country       String?   @db.VarChar(180)
  birth_date    DateTime?
  role          Int       @default(2) @db.SmallInt
  status        Int       @default(0) @db.SmallInt
  is_subscribed Int       @default(0) @db.SmallInt

  email_verified Int @default(0) @db.SmallInt
  phone_verified Int @default(0) @db.SmallInt
  gender         Int @default(1) @db.SmallInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserTokens            UserTokens[]
  UserVerificationCodes UserVerificationCodes[]
  Subscription          Subscription?
  Carousel              Carousel[]
  UserBranding          UserBranding?
  Image                 Image[]
  login_provider       String @db.VarChar(50)
}

model UserTokens {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @db.VarChar(255)
  family       String   @unique
  browserInfo  String?
  expiresAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id                         String   @id @default(cuid())
  userId                     Int      @unique
  orderId                    String   @unique
  status                     String
  endDate                    DateTime
  createdAt                  DateTime @default(now())
  productName                String
  variantName                String
  subscriptionLengthInMonths Int
  totalAmount                Float
  currency                   String
  user                       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Carousel {
  id                      String   @id @default(uuid())
  userId                  Int // Changed from String to Int
  name                    String
  titleTextSettings       Json
  descriptionTextSettings Json
  taglineTextSettings     Json
  layout                  Json
  background              Json
  slides                  Json
  sharedSelectedElement   Json?
  fontFamily              String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  globalBackground        Json?
  user                    User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserBranding {
  id       String  @id @default(uuid())
  userId   Int     @unique // Changed from String to Int
  name     String
  handle   String
  headshot String?
  user     User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Image {
  id        String   @id @default(uuid())
  userId    Int
  url       String
  name      String
  size      Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserVerificationCodes {
  id         Int      @id @default(autoincrement())
  user_id    Int
  code       String   @unique @db.VarChar(10)
  status     Int      @default(0) @db.SmallInt
  type       Int      @default(1) @db.SmallInt
  expired_at DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
