generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique @db.VarChar(255)
  password              String                  @db.VarChar(255)
  first_name            String?
  last_name             String?
  user_name             String?                 @unique @db.VarChar(255)
  unique_code           String?                 @unique @db.VarChar(255)
  phone                 String?                 @db.VarChar(180)
  photo                 String?                 @db.VarChar(500)
  country               String?                 @db.VarChar(180)
  birth_date            DateTime?
  role                  Int                     @default(2) @db.SmallInt
  status                Int                     @default(0) @db.SmallInt
  is_subscribed         Int                     @default(0) @db.SmallInt
  email_verified        Int                     @default(0) @db.SmallInt
  phone_verified        Int                     @default(0) @db.SmallInt
  gender                Int                     @default(1) @db.SmallInt
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  login_provider        String                  @db.VarChar(50)
  Workspaces            Workspace[]             @relation("UserWorkspaces")
  LinkedInProfiles      LinkedInProfile[]
  LinkedInPosts         LinkedInPost[]
  Carousels             Carousel[]
  UserTokens            UserTokens[]
  UserVerificationCodes UserVerificationCodes[]
  Subscription          Subscription?
  UserBranding          UserBranding?
  Files                 File[]
  creditBalance         Int                     @default(0)
  creditTransactions    CreditTransaction[]

  @@index([id]) // Add this if it's frequently used in relations
}

model Workspace {
  id            Int            @id @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  users         User[]         @relation("UserWorkspaces")
  carousels     Carousel[]
  linkedInPosts LinkedInPost[]

  @@index([id]) // Add this if it's frequently used in relations
}

model LinkedInProfile {
  id            Int            @id @default(autoincrement())
  userId        Int
  profileId     String         @unique
  accessToken   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  linkedInPosts LinkedInPost[]

  @@index([userId])
}

model LinkedInPost {
  id                 Int                 @id @default(autoincrement())
  content            String              @db.Text
  scheduledTime      DateTime
  status             String              @default("scheduled")
  visibility         String              @default("public") // public, connections, or group
  postType           String              @default("text") // text, image, video, document, poll
  imageUrls          String[] // Array of image URLs
  videoUrl           String? // URL for video content
  documentUrl        String? // URL for document content
  pollOptions        Json? // JSON object for poll options
  pollDurationHours  Int? // Duration of the poll in hours
  hashtags           String[] // Array of hashtags
  mentions           String[] // Array of mentioned user IDs or handles
  linkUrl            String? // URL for any external link shared
  linkTitle          String? // Title of the shared link
  linkDescription    String? // Description of the shared link
  linkThumbnail      String? // Thumbnail image URL for the shared link
  isAIGenerated      Boolean             @default(false)
  aiPrompt           String?
  creditCost         Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  workspaceId        Int?
  linkedInProfileId  Int
  user               User                @relation(fields: [userId], references: [id])
  workspace          Workspace?          @relation(fields: [workspaceId], references: [id])
  linkedInProfile    LinkedInProfile     @relation(fields: [linkedInProfileId], references: [id])
  PostLog            PostLog[]
  creditTransactions CreditTransaction[]
  likes              Int                 @default(0)
  comments           Int                 @default(0)
  shares             Int                 @default(0)
  impressions        Int                 @default(0)

  @@index([userId])
  @@index([workspaceId])
  @@index([linkedInProfileId])
}

model PostLog {
  id             Int          @id @default(autoincrement())
  linkedInPostId Int
  status         String
  message        String?
  timestamp      DateTime     @default(now())
  linkedInPost   LinkedInPost @relation(fields: [linkedInPostId], references: [id])

  @@index([linkedInPostId])
}

model UserTokens {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @db.VarChar(255)
  family       String   @unique
  browserInfo  String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id                         String   @id @default(cuid())
  userId                     Int      @unique
  orderId                    String   @unique
  status                     String
  endDate                    DateTime
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  productName                String
  variantName                String
  subscriptionLengthInMonths Int
  totalAmount                Float
  currency                   String
  user                       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Carousel {
  id          String     @id @default(uuid())
  userId      Int
  data        Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspaceId Int?
  user        User       @relation(fields: [userId], references: [id])
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([userId])
  @@index([workspaceId])
}

model UserBranding {
  id        String   @id @default(uuid())
  userId    Int      @unique
  name      String
  handle    String
  headshot  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model File {
  id           String   @id @default(uuid())
  userId       Int
  name         String
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String?
  isPublic     Boolean  @default(false)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserVerificationCodes {
  id         Int      @id @default(autoincrement())
  user_id    Int
  code       String   @unique @db.VarChar(10)
  status     Int      @default(0) @db.SmallInt
  type       Int      @default(1) @db.SmallInt
  expired_at DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model UserWorkspaces {
  A Int
  B Int

  @@unique([A, B], map: "_UserWorkspaces_AB_unique")
  @@index([B], map: "_UserWorkspaces_B_index")
  @@map("_UserWorkspaces")
}

model CreditTransaction {
  id             Int           @id @default(autoincrement())
  userId         Int
  postId         Int?
  amount         Int
  description    String
  createdAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id])
  linkedInPost   LinkedInPost? @relation(fields: [linkedInPostId], references: [id])
  linkedInPostId Int?

  @@index([userId])
  @@index([postId])
  @@index([linkedInPostId])
}
